datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INACTIVE
  ACTIVE
}

enum MemberRole {
  GUEST
  MEMBER
  MANAGER
  LEADER
}

enum OrganizationRole {
  ADMIN
  MEMBER
}

enum InvitationStatus {
  REJECTED
  ACCEPTED
  INVITING
}

enum TaskPriority {
  URGENT
  HIGH
  NORMAL
  LOW
}

enum StatusType {
  DONE
  INPROCESS
  TODO
}

enum ActivityObjectType {
  TASK
  PROJECT
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  password            String
  name                String?
  status              UserStatus?
  country             String?
  bio                 String?
  photo               String?
  dob                 DateTime?
  members             Members[]
  settings            Json?
  organizationMembers OrganizationMembers[]
  createdAt           DateTime?
  createdBy           String?
  updatedAt           DateTime?
  updatedBy           String?
}

model Favorites {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  icon      String
  link      String
  uid       String    @db.ObjectId
  orgId     String    @db.ObjectId
  type      String
  createdAt DateTime?
  createdBy String?
  updatedAt DateTime?
  updatedBy String?
}

model Organization {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @unique
  cover          String?
  avatar         String?
  maxStorageSize Int?
  desc           String?
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

enum OrgStorageType {
  AWS_S3
  DIGITAL_OCEAN_S3
}

model OrganizationStorage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  type           OrgStorageType
  config         Json
  organizationId String         @db.ObjectId
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

model OrganizationMembers {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  uid            String           @db.ObjectId
  status         InvitationStatus
  organizationId String           @db.ObjectId
  role           OrganizationRole
  users          User             @relation(fields: [uid], references: [id])
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

enum CounterType {
  TASK
  PROJECT
  ORGANIZATION
}

model Counter {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  type    CounterType
  counter Int
}

model Test {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  order Int
}

model Task {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  desc    String?
  dueDate DateTime?
  order   Int

  cover            String?
  plannedStartDate DateTime?
  plannedDueDate   DateTime?
  startDate        DateTime?
  projectId        String        @db.ObjectId
  priority         TaskPriority?
  visionId         String?       @db.ObjectId
  taskStatusId     String?       @db.ObjectId
  tagIds           String[]      @db.ObjectId
  assigneeIds      String[]      @db.ObjectId
  fileIds          String[]      @db.ObjectId
  parentTaskId     String?       @db.ObjectId
  progress         Int?
  done             Boolean       @default(false)
  // do not store `point` as objectID, cuz we just need to fill the point value
  taskPoint        Int?

  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model TaskStatus {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String
  order     Int
  projectId String     @db.ObjectId
  type      StatusType @default(TODO)
}

// Tag used for Projects and Tasks
model Tag {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String
  projectId String @db.ObjectId
}

model TaskPoint {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  point     Int
  projectId String  @db.ObjectId
  icon      String?
}

type taskAutomateThenType {
  change String
  value  String
}

type taskAutomateWhenType {
  happens   String
  is        String
  valueFrom String?
  valueTo   String?
  equal     String?
}

model TaskAutomation {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String    @db.ObjectId
  projectId      String    @db.ObjectId
  when           Json
  then           Json
  createdBy      String?
  createdAt      DateTime?
  updatedBy      String?
  updatedAt      DateTime?
}

enum FileType {
  FILE
  FOLDER
}

enum FileOwnerType {
  TASK
  DISCUSSION
  DOCUMENT
}

model FileStorage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String         @db.ObjectId
  projectId      String         @db.ObjectId
  name           String
  keyName        String
  type           FileType
  url            String?
  size           Float?
  mimeType       String?
  parentId       String?
  owner          String?        @db.ObjectId
  ownerType      FileOwnerType?
  isDeleted      Boolean?       @default(false)
  createdBy      String?
  createdAt      DateTime?
  deletedAt      DateTime?
  deletedBy      String?
}

model Project {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  projectViewId  String?   @db.ObjectId
  desc           String?
  cover          String?
  icon           String?
  isArchived     Boolean?  @default(false)
  createdBy      String?
  createdAt      DateTime?
  organizationId String
  updatedBy      String?
  updatedAt      DateTime?
}

enum ProjectViewType {
  DASHBOARD
  LIST
  BOARD
  CALENDAR
  TIMELINE
  GOAL
  TEAM
  ACTIVITY
}

model ProjectView {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      ProjectViewType
  icon      String?
  projectId String?         @db.ObjectId
  order     Int?
  data      Json?

  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model Vision {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  projectId      String?   @db.ObjectId
  organizationId String?   @db.ObjectId
  parentId       String?   @db.ObjectId
  startDate      DateTime?
  dueDate        DateTime?
  progress       Int?
  createdBy      String?
  createdAt      DateTime?
}

model Members {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  projectId String     @db.ObjectId
  role      MemberRole
  users     User?      @relation(fields: [uid], references: [id])
  uid       String?    @db.ObjectId
  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

enum DashboardComponentType {
  LINE
  SUMMARY
  PIE
  LISTTAB
  LIST
  COLUMN
  BURNDOWN
  BURNUP
}

model DashboardComponent {
  id          String                  @id @default(auto()) @map("_id") @db.ObjectId
  dashboard   Dashboard?              @relation(fields: [dashboardId], references: [id])
  dashboardId String?                 @db.ObjectId
  title       String?
  type        DashboardComponentType?
  config      Json?

  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model Dashboard {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  dashboardComponents DashboardComponent[]
  title               String?              @default("Untitled")
  projectId           String?              @db.ObjectId
  isDefault           Boolean?             @default(false)
}

enum ActivityType {
  TASK_CREATED
  // TASK_CHANGED // change due date, task title, description
  TASK_TITLE_CHANGED
  TASK_DESC_CHANGED
  TASK_DUEDATE_CHANGED

  TASK_ASSIGNEE_ADDED
  TASK_ASSIGNEE_REMOVED

  TASK_STATUS_CREATED
  TASK_STATUS_CHANGED

  TASK_PROGRESS_CHANGED
  TASK_PRIORITY_CHANGED
  TASK_POINT_CHANGED
  TASK_VISION_CHANGED

  TASK_COMMENT_CREATED
  TASK_COMMENT_CHANGED
  TASK_COMMENT_REMOVED

  TASK_ATTACHMENT_ADDED
  TASK_ATTACHMENT_REMOVED
}

model Activity {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  objectId   String
  objectType ActivityObjectType
  type       ActivityType
  createdBy  String
  data       Json?
  createdAt  DateTime
  updatedAt  DateTime?
  updatedBy  String?
}
