datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INACTIVE
  ACTIVE
}

enum MemberRole {
  GUEST
  MEMBER
  MANAGER
  LEADER
}

enum OrganizationRole {
  ADMIN
  MANAGER
  MEMBER
}

enum InvitationStatus {
  REJECTED
  ACCEPTED
  INVITING
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  password            String
  name                String?
  status              UserStatus?
  country             String?
  bio                 String?
  photo               String?
  dob                 DateTime?
  resetToken          String?
  members             Members[]
  settings            Json?
  organizationMembers OrganizationMembers[]
  createdAt           DateTime?
  createdBy           String?
  updatedAt           DateTime?
  updatedBy           String?
}

model Favorites {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  icon      String
  link      String
  uid       String    @db.ObjectId
  orgId     String    @db.ObjectId
  type      String
  createdAt DateTime?
  createdBy String?
  updatedAt DateTime?
  updatedBy String?
}

model Organization {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @unique
  slug           String    @unique
  cover          String?
  avatar         String?
  maxStorageSize Int?
  desc           String?
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

enum OrgStorageType {
  AWS_S3
  DIGITAL_OCEAN_S3
}

model OrganizationStorage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  type           OrgStorageType
  config         Json
  organizationId String         @db.ObjectId
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

model OrganizationMembers {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  uid            String           @db.ObjectId
  status         InvitationStatus
  organizationId String           @db.ObjectId
  role           OrganizationRole
  users          User             @relation(fields: [uid], references: [id])
  createdAt      DateTime?
  createdBy      String?
  updatedAt      DateTime?
  updatedBy      String?
}

model Test {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  order Int
}

enum FieldType {
  NUMBER
  TEXT
  DATE
  SELECT
  MULTISELECT
  CHECKBOX
  URL
  EMAIL
  FILES
  PHONE
  PERSON
  CONNECTOR
  CREATED_AT
  CREATED_BY
  UPDATED_AT
  UPDATED_BY
}

model Field {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  gridCollectionId String    @db.ObjectId
  name             String
  type             FieldType
  icon             String?
  hidden           Boolean?
  width            Int
  order            Int
  desc             String?
  data             Json?
  config           Json?
}

model GridCollection {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  icon      String?
  projectId String    @db.ObjectId
  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model Grid {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  gridCollectionId String  @db.ObjectId // Reference to GridCollection
  title            String
  cover            String?
  icon             String?

  customFields Json?
  isDeleted    Boolean?

  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

enum FileType {
  FILE
  FOLDER
}

enum FileOwnerType {
  USER
  TASK
  DISCUSSION
  DOCUMENT
}

model FileStorage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String         @db.ObjectId
  projectId      String         @db.ObjectId
  name           String
  keyName        String
  type           FileType
  url            String?
  size           Float?
  mimeType       String?
  parentId       String?
  owner          String?        @db.ObjectId
  ownerType      FileOwnerType?
  isDeleted      Boolean?       @default(false)
  createdBy      String?
  createdAt      DateTime?
  deletedAt      DateTime?
  deletedBy      String?
}

model Project {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  projectViewId String?  @db.ObjectId
  desc          String?
  cover         String?
  icon          String?
  isArchived    Boolean? @default(false)
  createdBy     String?

  // these count settings is used for counting the number of tasks by days
  countMemberTask  Boolean? @default(false)
  countProjectTask Boolean? @default(true)

  createdAt      DateTime?
  organizationId String
  updatedBy      String?
  updatedAt      DateTime?
}

enum ProjectViewType {
  LIST
  BOARD
  CALENDAR
  TIMELINE
  GOAL
  TEAM
  ACTIVITY
  DASHBOARD
  GRID
}

model ProjectView {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      ProjectViewType
  onlyMe    Boolean?
  icon      String?
  projectId String?         @db.ObjectId
  order     Int?
  data      Json?

  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model Members {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  projectId String     @db.ObjectId
  role      MemberRole
  users     User?      @relation(fields: [uid], references: [id])
  uid       String?    @db.ObjectId
  createdBy String?
  createdAt DateTime?
  updatedBy String?
  updatedAt DateTime?
}

model Application {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  clientId       String   @unique
  clientSecret   String
  organizationId String   @db.ObjectId
  scopes         String[] // Array of permitted scopes

  createdAt DateTime?
  createdBy String?
  updatedAt DateTime?
  updatedBy String?
}
